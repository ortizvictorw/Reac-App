{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGif.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAmB5C,OACI,0BAAMC,SAVS,SAACC,GAChBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAC5BR,GAAc,SAAAS,GAAG,OAAIP,GAAJ,mBAAkBO,OACnCN,EAAe,OAOX,2BACAO,KAAK,OAELC,MAAOT,EAEPU,SAvBiB,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,YCPlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGhC,OADAC,QAAQC,IAAI,CAAEH,QAAOC,QAEjB,yBAAKG,UAAU,0CACb,yBAAKC,IAAKJ,EAAKK,IAAMN,IACrB,2BAAIA,K,uBCRDO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbR,EADa,iDACmCS,UAAUF,GAD7C,+DAGAG,MAAQV,GAHR,cAGbW,EAHa,gBAKCA,EAAKC,OALN,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHC,GAAGD,EAAIC,GACPlB,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIE,cAAN,aAAE,EAAYC,iBAAiBnB,QAXvB,kBAedc,GAfc,4CAAH,sDCKPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECAX,SAAEA,GAAa,IAAD,EAEZtB,mBAAS,CAC/B4B,KAAK,GACLQ,SAAQ,IAJ0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAwB1C,OAhBEC,qBAAW,WAGRlB,EAAQC,GACPkB,MAAK,SAAAC,GAEFzB,QAAQC,IAAIwB,GACTH,EAAS,CACLV,KAAKa,EACLL,SAAQ,SAIlB,CAACd,IAGAe,EDpB2BK,CAAapB,GAAjCW,EAJyB,EAI/BL,KAAcQ,EAJiB,EAIjBA,QAalB,OACI,oCACI,wBAAIlB,UAAY,qCAAqCI,GAEpDc,GAAW,uBAAGlB,UAAY,oCAAf,YAEZ,yBAAKA,UAAU,aAGXe,EAAOH,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIY,IAAMZ,EAAIC,IACND,UE5Bfa,EAAe,WAAO,IAAD,EAIU5C,mBAAS,CAAC,gBAJpB,mBAInB6C,EAJmB,KAIP9C,EAJO,KAgB1B,OACA,oCACI,+CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAE7B,4BAEY8C,EAAWf,KAAI,SAAAR,GAAQ,OACnB,kBAAC,EAAD,CACAqB,IAAKrB,EACLA,SAAUA,UCzBtCwB,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.40d0b3b8.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setinputValue] = useState('')\r\n    //funcion qeu se dispara al detectar un cambio dentro del input\r\n    //recive dicho cambio(e) y se lo asigna al Hook (setInputValue)\r\n    const handleInputValue = (e)=>{\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    //funcion que orevent default\r\n    \r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length>2){\r\n        setCategories(cat=>([inputValue,...cat]))\r\n        setinputValue ('');\r\n    }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        \r\n            <input\r\n            type=\"text\"\r\n            //valor del input actaul\r\n            value={inputValue}\r\n            //evento ooChange cpara setear el state\r\n            onChange={handleInputValue}\r\n           />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes ={\r\n    setCategories : PropTypes.func.isRequired\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    console.log({ title, url})\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n          <img src={url} alt= {title}/>\r\n          <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async (category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=02mtTxcYt3HmzG3K2777vl3eyeD5x3MT`\r\n    //hace la peticion de gif al end point\r\n    const resp = await fetch ( url );\r\n    //toma la respuesta y las convierte en un json\r\n    const {data}= await resp.json();\r\n   \r\n    const gifs = data.map(img=>{\r\n        return {\r\n            id:img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n   \r\n        }\r\n    })\r\n  return gifs;\r\n   }","import React from 'react'\r\n/* import {useEffect} from 'react' */\r\nimport { GifGridItem } from './GifGridItem' \r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n \r\nexport const GifGrid = ({category}) => {\r\n    \r\n\r\n\r\nconst { data: images, loading } = useFetchGifs(category);\r\n\r\n/* **************Comentario****************** \r\n\r\nel contenido tendra o no dependencia de otra funcion para volver a ejecutarse\r\nimages => el el gif\r\nsetImages=> es el que mutar√° a images\r\n\r\n\r\n ******************************************* */\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className = 'animate__animated animate__fadeIn'>{category}</h3>\r\n\r\n            {loading && <p className = 'animate__animated animate__flash'>Loanding</p>}\r\n\r\n            <div className=\"card-grid\">\r\n\r\n            {\r\n                images.map( img => (\r\n                    <GifGridItem\r\n                        key={ img.id }\r\n                        {...img}\r\n                        />\r\n                ))\r\n            }\r\n\r\n            </div>\r\n           \r\n     \r\n        </>\r\n    )\r\n}\r\n","import{ useState, useEffect } from 'react'\r\nimport{ getGifs} from '../helpers/getGif'\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category )=>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    \r\n  useEffect (()=>{\r\n\r\n     //devuelve un promesa\r\n     getGifs(category)\r\n     .then(imgs=>{\r\n         //imagenes\r\n         console.log(imgs);\r\n            setState({\r\n                data:imgs,\r\n                loading:false\r\n             })\r\n     }) \r\n    //dependencias\r\n   }, [category])\r\n\r\n\r\nreturn state; \r\n/*  {\r\n    data:[],\r\n    loading:true\r\n} */\r\n}","import React from 'react'\r\nimport {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n   \r\n\r\n        \r\n        const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n        //Funcion para agregar un valor al final del array de categories\r\n        /* const handleAdd = ()=>{ */\r\n            \r\n            /* setCategories([...categories,'Dragon']) */\r\n            //setea el estado\r\n            /* setCategories(cate=>[...cate,'Dragon'])\r\n             */\r\n\r\n        \r\n\r\n        return (\r\n        <>\r\n            <h2>Buscador de Gif</h2>\r\n            <AddCategory setCategories ={setCategories}/>\r\n            \r\n            <ol>\r\n                    {\r\n                        categories.map(category =>(\r\n                            <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                            />\r\n                        ) )\r\n                            \r\n                       \r\n                    }\r\n            </ol>\r\n        </>\r\n    )\r\n\r\n                }      ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\n\nReactDOM.render(\n \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}